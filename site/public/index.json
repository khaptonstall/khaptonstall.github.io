[{"content":"Problem Using Automatic Signing in Xcode 15.4, I received a ‚ÄúFailed Registering Bundle Identifier‚Äù error when I went to go add a new Capability for one of my Targets:\nWhile the error message states:\nThe app identifier ‚Äú‚Ä¶‚Äù cannot be registered to your development team because it is not available. Change your bundle identifier to a unique string to try again.\nthe app identifier (Bundle Identifier) was already registered under my account in App Store Connect, and signing was previously working prior to adding a new Capability (which updates the Provisioning Profile).\nSolution The solution was to prefix my Bundle Identifier in Xcode with my Apple Developer Team ID (which can be found at https://developer.apple.com/account under Membership Details).\n","permalink":"http://localhost:1313/posts/fix-failed-registering-bundle-identifier-error-with-automatic-signing-in-xcode-15/","summary":"\u003ch1 id=\"problem\"\u003eProblem\u003c/h1\u003e\n\u003cp\u003eUsing Automatic Signing in Xcode 15.4, I received a ‚ÄúFailed Registering Bundle Identifier‚Äù error when I went to go add a new Capability for one of my Targets:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"failed-registering-bundle-identifier-error.png\" alt=\"alt\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eWhile the error message states:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eThe app identifier ‚Äú‚Ä¶‚Äù cannot be registered to your development team because it is not available.\u003c/strong\u003e Change your bundle identifier to a unique string to try again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ethe app identifier (Bundle Identifier) was already registered under my account in App Store Connect, and signing was previously working prior to adding a new Capability (which updates the Provisioning Profile).\u003c/p\u003e","title":"Fix Failed Registering Bundle Identifier Error with Automatic Signing in Xcode 15"},{"content":"This post will outline a process of checking Xcode Code Snippets into source control in order to build out a library of snippets you can easily import on new machines or take with you to new companies. (You can also use this to create a shared library of snippets within a development team.)\nI won‚Äôt go over how to create and use code snippets within Xcode, but if you‚Äôd like a refresher, check out this post by Sarun.\nSetup Create a code snippets repository First, you‚Äôll need to have a repository setup in which you‚Äôll store your code snippets. We‚Äôll assume that‚Äôs done and that we‚Äôll store all snippets within the root of that repository.\nSave your first snippet We‚Äôll also need a code snippet to work with. For demo purposes, I‚Äôll use the one below, which contains some boilerplate to create a new EnvironmentKey in SwiftUI:\n\u0026amp;lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026amp;gt; \u0026amp;lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026amp;gt; \u0026amp;lt;plist version=\u0026#34;1.0\u0026#34;\u0026amp;gt; \u0026amp;lt;dict\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetCompletionPrefix\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;environmentkey\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetCompletionScopes\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;array\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;TopLevel\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;/array\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetContents\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;private struct \u0026amp;amp;lt;#Key#\u0026amp;amp;gt;: EnvironmentKey { static let defaultValue: \u0026amp;amp;lt;#Type#\u0026amp;amp;gt; = \u0026amp;amp;lt;#Default Value#\u0026amp;amp;gt; } extension EnvironmentValues { var \u0026amp;amp;lt;#name#\u0026amp;amp;gt;: \u0026amp;amp;lt;#Type#\u0026amp;amp;gt; { get { self[\u0026amp;amp;lt;#Key#\u0026amp;amp;gt;.self] } set { self[\u0026amp;amp;lt;#Key#\u0026amp;amp;gt;.self] = newValue } } }\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetIdentifier\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;8DBC6F81-7661-48B5-B852-2336988AB94C\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetLanguage\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;Xcode.SourceCodeLanguage.Swift\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetSummary\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetTitle\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;string\u0026amp;gt;EnvironmentKey\u0026amp;lt;/string\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetUserSnippet\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;true/\u0026amp;gt; \u0026amp;lt;key\u0026amp;gt;IDECodeSnippetVersion\u0026amp;lt;/key\u0026amp;gt; \u0026amp;lt;integer\u0026amp;gt;0\u0026amp;lt;/integer\u0026amp;gt; \u0026amp;lt;/dict\u0026amp;gt; \u0026amp;lt;/plist\u0026amp;gt; And here‚Äôs the Swift code the above code snippet will generate:\nprivate struct \u0026lt;#Key#\u0026gt;: EnvironmentKey { static let defaultValue: \u0026lt;#Type#\u0026gt; = \u0026lt;#Default Value#\u0026gt; } extension EnvironmentValues { var \u0026lt;#name#\u0026gt;: \u0026lt;#Type#\u0026gt; { get { self[\u0026lt;#Key#\u0026gt;.self] } set { self[\u0026lt;#Key#\u0026gt;.self] = newValue } } } Copy the XML code snippet from above and save it as a new file within the root directory of your repo with the extension .codesnippet (e.g. environment-key.codesnippet).\nLoad Your Custom Code Snippets To make your code snippets available to Xcode, you‚Äôll need to move them into the CodeSnippets directory, found at ~/Library/Developer/Xcode/UserData/CodeSnippets.\nBelow is a script you can create and store in your code snippets repo to help automate the process:\n#!/bin/bash # Store the Xcode CodeSnippets directory into a variable we can reference SNIPPETS_DIRECTORY=\u0026#34;$HOME/Library/Developer/Xcode/UserData/CodeSnippets\u0026#34; # Find all .codesnippet files within the current directory and # store them in a variable SNIPPETS=$(find ./ -type f -name \u0026#39;*.codesnippet\u0026#39;) # For each .codesnippet file, copy it into the snippets directory echo \u0026#34;$SNIPPETS\u0026#34; | xargs -I {} cp {} $SNIPPETS_DIRECTORY As you continue working in Xcode and find yourself typing the same boilerplate, you can create Xcode Code Snippets and pull them from the CodeSnippets directory into your own repo. Then, when you jump to a new machine, simply clone your repo and run the script above! üéâ\nThere‚Äôs also opportunity here to create a script which does the reverse (i.e. pulls all the snippets out of the CodeSnippets directory and into your repo), but I‚Äôll leave that as an exercise to the reader üßë‚Äçüíª.\n","permalink":"http://localhost:1313/posts/building-a-repository-of-xcode-code-snippets/","summary":"\u003cp\u003eThis post will outline a process of checking Xcode Code Snippets into source control in order to build out a library of snippets you can easily import on new machines or take with you to new companies. (You can also use this to create a shared library of snippets within a development team.)\u003c/p\u003e\n\u003cp\u003eI won‚Äôt go over how to create and use code snippets \u003cem\u003ewithin\u003c/em\u003e Xcode, but if you‚Äôd like a refresher, check out \u003ca href=\"https://sarunw.com/posts/how-to-create-code-snippets-in-xcode/\"\u003ethis post by Sarun\u003c/a\u003e.\u003c/p\u003e","title":"Building a Repository of Xcode Code Snippets"},{"content":"I recently decided to update my personal home page (a simple one-page HTML site using Jekyll) to try out Ignite, as I‚Äôd much prefer to maintain a Swift package over working directly with HTML.\nIgnite is an open-source static site builder for Swift developers, created by Paul Hudson.\nWhile working with Ignite is fairly straightforward, and there are plenty of excellent examples provided in the IgniteSamples repo, I ran into a couple speed bumps deploying via GitHub Pages.\nBelow, I‚Äôll walk you through the steps to get your own static site up and running using Ignite and GitHub Pages.\nPrerequisites This guide expects you to already be familiar with Git, Swift and SPM. Also, you should have followed the steps to setup a personal GitHub Page using GitHub‚Äôs own documentation and have that repo cloned locally.\nIn doing so, you should be able to visit github-username.github.io and see a basic HTML page (replacing github-username with your own).\nSetting up your Ignite home page The simplest way to get started is to download the IgniteStarter project.\nAdd the contents of this project to the root directory of your personal GitHub Page repo you cloned locally.\nSince this is a Swift Package, open the contents in Xcode and open the Site.swift file. Inside, change the value url property to match the url of your personal Github Page:\nstruct ExampleSite: Site { var url = URL(\u0026#34;github-username.github.io\u0026#34;) } Once updated, build and run the IgniteStarter scheme in Xcode. This should generate a new Build/ folder in your project and at the top level should be an index.html file representing your home page.\nRunning your website locally Before deploying to GitHub Pages, verify that you can run your website locally. In your terminal, navigate into the Build/ directory generated by Ignite and run the following:\npython3 -m http.server The output of this command should include the port your local web server is running on (e.g. 8000). In your web browser, navigate to http://localhost:port and verify you can view your page.\nDeploying to GitHub Pages By default, GitHub Pages only deploys from either the root of a branch, or from a docs/ folder. Since our site live in the Build/ directory, there are a couple steps to take before successfully deploying to GitHub Pages:\nRemove the index.html file from the root of your directory that you created when first setting up your GitHub Page\nOpen your .gitignore and remove the Build directory\nIn your GitHub Page repo, navigate to Settings ‚Üí Pages ‚Üí Build and deployment. Use the Source dropdown to switch from Deploy from a branch to GitHub Actions\nBack in your terminal, in the root of your project, prepare a new workflow to deploy your page\nmkdir -p .github/workflows \u0026amp;\u0026amp; touch .github/workflows/static.yml Open static.yml and paste the following, changing your default branch as necessary a. The important piece here is in the Upload artifact step. Instead of defaulting to the root directory, we‚Äôre pointing at the Build directory that contains our home page\n# Simple workflow for deploying static content to GitHub Pages name: Deploy static content to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: # Single deploy job since we\u0026#39;re just deploying deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 - name: Setup Pages uses: actions/configure-pages@v5 - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: \u0026#39;./Build\u0026#39; - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Push your changes up to GitHub and, once the deployment completes, visit your new Ignite-driven home page üéâ\n","permalink":"http://localhost:1313/posts/building-a-static-site-in-swift-using-ignite-and-github-pages/","summary":"\u003cp\u003eI recently decided to update my personal home page (a simple one-page HTML site using Jekyll) to try out Ignite, as I‚Äôd much prefer to maintain a Swift package over working directly with HTML.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/twostraws/Ignite\"\u003eIgnite\u003c/a\u003e is an open-source static site builder for Swift developers, created by \u003ca href=\"https://twitter.com/twostraws\"\u003ePaul Hudson\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhile working with Ignite is fairly straightforward, and there are plenty of excellent examples provided in the \u003ca href=\"https://github.com/twostraws/IgniteSamples\"\u003eIgniteSamples\u003c/a\u003e repo, I ran into a couple speed bumps deploying via \u003ca href=\"https://pages.github.com\"\u003eGitHub Pages\u003c/a\u003e.\u003c/p\u003e","title":"Building a Static Site in Swift using Ignite and GitHub Pages"}]